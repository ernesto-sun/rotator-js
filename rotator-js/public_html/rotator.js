/**
 *  rotator.js   Simple Rotator made in JavaScript (cumulus, tag-cloud)
 * 
 *  @see <https://github.com/ernesto-sun/rotator-js>
 *  
 *  @author  Ernesto Sun <contact@ernesto-sun.com>
 *  @version 20150906-eto
 *  @since 20150906-eto
 * 
 *  @copyright (C) 2014-2015 Ing. Ernst Johann Peterec <http://ernesto-sun.com>
 *  @license AGPL <http://www.gnu.org/licenses/agpl.txt>
 *
 *  rotator-js is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  rotator-js is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with rotator-js. If not, see <http://www.gnu.org/licenses/agpl.txt>.
 *
 */


/**
 *
*/

// the sinus-matrix as generated by the simple PHP-script create_mx.php 
var mx=[[100,180],[103,180],[107,180],[110,180],[114,179],[117,179],[121,178],[124,177],[128,177],[131,176],[134,175],[137,173],[141,172],[144,171],[147,169],[150,168],[153,166],[156,165],[159,163],[162,161],[164,159],[167,157],[169,155],[172,153],[174,150],[177,148],[179,145],[181,143],[183,140],[185,138],[187,135],[188,132],[190,129],[191,127],[193,124],[194,121],[195,118],[196,115],[197,112],[198,109],[198,106],[199,103],[199,99],[200,96],[200,93],[200,90],[200,87],[200,84],[199,81],[199,77],[198,74],[198,71],[197,68],[196,65],[195,62],[194,59],[193,56],[191,53],[190,51],[188,48],[187,45],[185,42],[183,40],[181,37],[179,35],[177,32],[174,30],[172,27],[169,25],[167,23],[164,21],[162,19],[159,17],[156,15],[153,14],[150,12],[147,11],[144,9],[141,8],[137,7],[134,5],[131,4],[128,3],[124,3],[121,2],[117,1],[114,1],[110,0],[107,0],[103,0],[100,0],[97,0],[93,0],[90,0],[86,1],[83,1],[79,2],[76,3],[72,3],[69,4],[66,5],[63,7],[59,8],[56,9],[53,11],[50,12],[47,14],[44,15],[41,17],[38,19],[36,21],[33,23],[31,25],[28,27],[26,30],[23,32],[21,35],[19,37],[17,40],[15,42],[13,45],[12,48],[10,51],[9,53],[7,56],[6,59],[5,62],[4,65],[3,68],[2,71],[2,74],[1,77],[1,81],[0,84],[0,87],[0,90],[0,93],[0,96],[1,99],[1,103],[2,106],[2,109],[3,112],[4,115],[5,118],[6,121],[7,124],[9,127],[10,129],[12,132],[13,135],[15,138],[17,140],[19,143],[21,145],[23,148],[26,150],[28,153],[31,155],[33,157],[36,159],[38,161],[41,163],[44,165],[47,166],[50,168],[53,169],[56,171],[59,172],[63,173],[66,175],[69,176],[72,177],[76,177],[79,178],[83,179],[86,179],[90,180],[93,180],[97,180]];

// teh ring-matrix holding characteristics of each of the 6 innner rings. the outer ring has [0,0,0,0,0] and is not mentioned explicitely
var ring=[  // x-shift, perc-shift, posneg, x-offset, perc-half
[3,3,1,35,13],
[1,2,1,60,25],
[2,1,1,85,50],
[2,1,-1,50,50],
[1,2,-1,25,25],
[3,3,-1,0,13]];

var P=0; // the main-rotator
var P_neg=0; // the main-rotator inverse
var P0=0; // the contsant P for the outer ring, changes slower
var P0_delay=1; // the contsant P for the outer ring, changes slower
var P0_dummy=0; // the contsant P for the outer ring, changes slower
var P_step=33; // the step of element setting
var P_step_total=1260;// 7 rings*180; // the step of element setting
var V=1; // speed in P-steps per Interval (can be double)
var V_ceil=0; // int-version of V
var V_ring=0; // to switch rings, one by one

// helpers for movement-tracking
var ts_down=0;
var x_down=0;
var y_down=0;

// some helper-variables
var d_r=0,
    e_r=0,
    e_count=0,
    isMouseDown=false,
    fact=0,
    firstRun=1;
    	
var mxe=new Array();	// this array gets an entry for each rotator-entry with metatdata for fast position-calculation and -setting


// ---------------------------------
function wiped(ms,x_len,y_len)
{
        // this function is called when the user wiped over the rotator (both mouse or touch)
	var len=0,
		prod=(x_len*x_len)+(y_len*y_len);
	len=Math.round(Math.sqrt(prod));

	//console.log("WIPED: "+ms);
	//console.log("LEN: "+len);
	//console.log("V: "+v);
	
	x_len_abs=Math.abs(x_len);
	y_len_abs=Math.abs(y_len);
	
	V_ring=0;
	
	if(x_len_abs>y_len_abs)
	{
		V_ring=x_len/fact/-70;
		if(V_ring>0)V_ring=Math.ceil(V_ring);
		else V_ring=Math.floor(V_ring);
		
		// if(x_len<0)console.log("LEFT");
		// else console.log("RIGHT");

		if(y_len_abs>0)
		{
			if((x_len_abs/y_len_abs)<3)
			{
				V=y_len*-30/fact/ms;  
				
				// if(y_len<0)console.log("ALSO UP");
				// else console.log("ALSO DOWN");
			}
		}
	}
	else
	{
		V=y_len*-30/fact/ms;  // fact comes in because of resizing of whole thing
		
		// if(y_len<0)console.log("UP");
		// else console.log("DOWN");
		
		if(x_len_abs>0)
		{
			if((y_len_abs/x_len_abs)<3)
			{
				V_ring=x_len/fact/-70;
				if(V_ring>0)V_ring=Math.ceil(V_ring);
				else V_ring=Math.floor(V_ring);
				
				// if(x_len<0)console.log("ALSO LEFT");
				// else console.log("ALSO RIGHT");
			}
		}
	}
	
	// console.log("V_RING: "+V_ring);
	// console.log("V: "+V);
	// console.log("MS: "+ms);
	// console.log("X-LEN: "+x_len);
	// console.log("Y-LEN: "+y_len);
	// console.log("------------------------");
	
	if(V>1||V<1||V_ring!=0)return 1;
	return 0;
}



// the effective starting-point...
jQuery(document).ready(function($) 
{
    //--------------------------------
    setInterval(function()
    {
            // the most essential movement-function... 

            if(V==0 && V_ring==0)return;
            V=V*0.9;
            if(Math.abs(V)<0.1){V=0;if(V_ring==0)return;}
            V_ceil=Math.ceil(V);		
            P+=V_ceil;

            if(P>179)
            {
                P-=180;
                P0_dummy=P; 	
            }
            else if(P<0)
            {
                P+=180;
                P0_dummy=P; 	
            }

            if(V_ring!=0)
            {
                // reset P0 if rings changes
                P0=P0_dummy=P;
            }
            else if(Math.abs(P-P0_dummy)>P0_delay)
            {
                P0_dummy=P;
                if(V>0)P0++;
                else P0--;
                if(P0>179)P0-=180;
                else if(P0<0)P0+=180;
            }

            P_neg-=V_ceil;
            if(P_neg<0)P_neg+=180;
            else if (P_neg>179)P_neg-=180;

            var p_e,perc,r_i,x;
            for(i=0;i<e_count;i++)
            {
                perc=80;
                if(!mxe[i])console.log(i);

                r_i=mxe[i][3];

                if(V_ring!=0)
                {
                    if(V_ring>0)
                    {
                        r_i++;
                        if(r_i>5)r_i=-1;
                        else if(r_i==3)
                        {
                            // switched pos/neg
                            var dum=mxe[i][1];mxe[i][1]=mxe[i][2];mxe[i][2]=dum;
                        }
                    }
                    else
                    {
                        r_i--;
                        if(r_i<-1)r_i=5;
                        else if(r_i==2)
                        {
                            // switched pos/neg
                            var dum=mxe[i][1];mxe[i][1]=mxe[i][2];mxe[i][2]=dum;
                        }
                    }
                    mxe[i][3]=r_i;
                }

                if(r_i>=0)
                {
                    // inner ring
                    p_e=ring[r_i][2]==1?
                            P<mxe[i][2]?P+mxe[i][1]:P-mxe[i][2]:
                            P_neg<mxe[i][2]?P_neg+mxe[i][1]:P_neg-mxe[i][2];

                    //if(!mx[p_e])console.log(mxe[i][2]);
                    x=mx[p_e][0];  // between 1 and 200

                    perc+=((x>>ring[r_i][1])-ring[r_i][4])*ring[r_i][2]; 

                    x=(ring[r_i][0]==3?(x>>2)+(x>>1):(x>>ring[r_i][0]))+ring[r_i][3];

                }
                else
                {
                    // ring 0
                    p_e=P0<mxe[i][2]?P0+mxe[i][1]:P0-mxe[i][2];
                    x=mx[p_e][0];
                }

                mxe[i][0].style.left=x+"em";
                mxe[i][0].style.top=mx[p_e][1]+"em";
                mxe[i][0].style.opacity=(perc/100)*1.2;
                mxe[i][0].style.zIndex=perc;

                mxe[i][4].style.fontSize=perc+"%";
            }

            if(V_ring>0)V_ring--;
            else if(V_ring<0)V_ring++;

            if(firstRun)
            {
                    firstRun=0;
                    d_r.css("opacity",1);
            }

    },90); // this is the interval-time in ms. Until 200ms it looks quite smooth at my browser. Much less also works but takes performance.


    //--------------------------------
    //--------------------------------

    // init-routine

    d_r=jQuery("div.div-rotator");

    var d_r_w=d_r.width(),
            height=0,
            fs=d_r.css("font-size");

    fact=d_r_w/200;

    d_r.css({"font-size":fact+"px","overflow":"visible"});

    e_r=d_r.children();
    e_r.children().css({"font-size":fs,"height":"1px","width":"1px","overflow":"visible"});


    e_count=e_r.length;

    P_step=Math.round(P_step_total/e_count);

    if((180%P_step)<10)P_step+=Math.round(10/180/P_step);

    var P_e=0,
            c_ring=2,  // start with ring 2 to have the entries starting in the center
            c_char_max=1,
            c_char=0;	

    e_r.each(function(i,e)
    {
            d_text=e.firstChild.firstChild;
            mxe.push(new Array(e,
                            P_e,
                            180-P_e,
                            c_ring,
                            d_text));

            c_char=d_text.innerHTML.length;
            if(c_char>c_char_max)c_char_max=c_char;

            P_e+=P_step;
            if(P_e>179)
            {
                    P_e-=180;
                    c_ring+=1; 
                    if(c_ring>5)c_ring=-1;  
            }

    });

    height=(d_r_w*0.9)+(parseInt(fs)/2);
    width=d_r_w;
    d_r.css({"height":height+"px","width":width+"px"});

    d_r.on('vmousedown',function(e) 
    {
            //console.log("mousedown");
            ts_down=Date.now();
            x_down=e.screenX;
            y_down=e.screenY;
    })
    .on('vmouseup',function(e) 
    {
            //console.log("IMPORTANT Mouseup: "+ts_down);
            if(ts_down>0)
            {
                    var x_len=e.screenX-x_down,
                            y_len=e.screenY-y_down,
                            ms=Date.now()-ts_down;
                    ts_down=0;	

                    if(Math.abs(x_len)+Math.abs(y_len)>5&&ms<500)
                    {
                            if(wiped(ms,x_len,y_len))e.preventDefault();
                    }
                    else V=0;
            }
            x_down=y_down=ts_down=0;
    })
    .mouseenter(function(e) 
    {
            //console.log("mouseenter: "+isMouseDown);
            //console.log(e);
            if(isMouseDown)
            {
                    ts_down=Date.now();
                    x_down=e.screenX;
                    y_down=e.screenY;
            }
            else x_down=y_down=ts_down=0;
    })
    .mouseleave(function(e) 
    {
            //console.log("mouseleave");
            if(ts_down>0)
            {
                    var x_len=e.screenX-x_down,
                            y_len=e.screenY-y_down,
                            ms=Date.now()-ts_down;
                    if(wiped(ms,x_len,y_len))e.preventDefault();
            }
            x_down=y_down=ts_down=0;
    });

    jQuery("body").mousedown(function() 
    {
            //console.log("body mousedown");
            isMouseDown = true;
    })
    .mouseup(function() 
    {
            //console.log("body mouseup");
            isMouseDown = false;
    });	

	

});




